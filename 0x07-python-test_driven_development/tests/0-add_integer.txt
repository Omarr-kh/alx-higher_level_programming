# 0-add_integer.txt

===========================
How to Use 0-add_integer.py
===========================

This module defines an addition function ``add_integer(a, b=98)``.

Usage
=====

``add_integer(...)``` returns the addition of its two arguments. For numbers,
that value is equivalent to using the ``+`` operator.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(1, 1)
    2

::

    >>> add_integer(-1, 2)
    1

It also works with floating-point values.

::

    >>> add_integer(1.0, 2.0)
    3

Note that a float is casted to int before addition is performed.

::

    >>> add_integer(1.5, 2.3)
    3

::

    >>> add_integer(-1.2, -2.1)
    -3

Floating and whole numbers can be combined.

::

    >>> add_integer(1.8, -5)
    -4

The second argument is optional - and by default, it is equal 98.

::

    >>> add_integer(100)
    198

Non-Numbers
===========

``add_integer()`` expects that both arguments are Numbers.
If either argument is not a number, a TypeError is raised:

::

    >>> add_integer("number", 1)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(25, "hello, world")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(82.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are not numbers, a TypeError is only
printed for the first argument.

::

    >>> add_integer("this", "number")
    Traceback (most recent call last):
    TypeError: a must be an integer

The function will also fail if infinity is provided
and will raise OverflowError.

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

::

    >>> add_integer(62, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

same thing with NaN numbers and will raise ValueError.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(5, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
